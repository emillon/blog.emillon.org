---
title: Closures are prepared statements
author: Etienne Millon
tags: ocaml
---

The other day I saw [an interesting interview question]:

> Implement function foo which takes an integer size, and returns an array of
> that size where each element in that array is a function that returns the
> index of that function in the array.

It is a nice question to 

Here is a possible OCaml solution[^init]:

[^init]: A more idiomatic verion would use `Array.init`, but then it does not
use closures.

~~~ {.ocaml}
let build_array n =
  let a = Array.make n (fun () -> assert false) in
  for i = 0 to n - 1 do
    let f () =
      i
    in
    a.(i) <- f
  done;
  a
~~~

The initialization creates an array of the correct size, whose elements are all
initialized to `fun () -> assert false`. That is because `Array.make` requires
an initializer of the correct type, but that is not too important here.

Then, in the for loop, we construct a function that returns the loop index, and
assign it to the corresponding element in the array.

This is surprising because it seems that to work this needs to create code at
run-time.

But actually, `f` can be compiled only once, without knowing what `i` will be.

The expression `fun () -> i` contains a free variable, `i`. Its value can not
be known at compile time. So, to compile this function, every occurrence of `i`
inside has to be replaced by a marker saying "the value of `i`".

During the execution of the loop, at the `let f`, an object is created that
combines:

  - the code of `f` with the wildcard value;
  - the value of `i`.

This is a closure.

Here, a total of `n` closures are created. The code part is shared by all, and
the values captured are all different.

---

This schema exists in another field, database systems.

Most databases have a feature called prepared statements, which look like this:

~~~ {.sql}
SELECT * FROM users WHERE name = ? AND active = 1
~~~

They contain holes, marked with `?`. To use them, it necessary to pass both the
code itself (with holes) and parameters will be replaced with. The database
server will then use the parameters when it sees `?` wildcards.

They have two advantages. The first one is that the code part can be reused with
different parameters, without parsing the query again. The second one is that
it prevents SQL injection vulnerabilities, since no erroneous query can be
built.

[an interesting interview question]: https://news.ycombinator.com/item?id=8917689
